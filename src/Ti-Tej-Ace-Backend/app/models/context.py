# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model
from models.domain import Domain  # noqa: F401,E501


class Context(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, domain: Domain=None, country: str=None, city: str=None, action: str=None, core_version: str=None, bap_id: str=None, bap_uri: str=None, bpp_id: str=None, bpp_uri: str=None, transaction_id: str=None, message_id: str=None, timestamp: datetime=None, key: str=None, ttl: str=None):  # noqa: E501
        """Context - a model defined in Swagger

        :param domain: The domain of this Context.  # noqa: E501
        :type domain: Domain
        :param country: The country of this Context.  # noqa: E501
        :type country: str
        :param city: The city of this Context.  # noqa: E501
        :type city: str
        :param action: The action of this Context.  # noqa: E501
        :type action: str
        :param core_version: The core_version of this Context.  # noqa: E501
        :type core_version: str
        :param bap_id: The bap_id of this Context.  # noqa: E501
        :type bap_id: str
        :param bap_uri: The bap_uri of this Context.  # noqa: E501
        :type bap_uri: str
        :param bpp_id: The bpp_id of this Context.  # noqa: E501
        :type bpp_id: str
        :param bpp_uri: The bpp_uri of this Context.  # noqa: E501
        :type bpp_uri: str
        :param transaction_id: The transaction_id of this Context.  # noqa: E501
        :type transaction_id: str
        :param message_id: The message_id of this Context.  # noqa: E501
        :type message_id: str
        :param timestamp: The timestamp of this Context.  # noqa: E501
        :type timestamp: datetime
        :param key: The key of this Context.  # noqa: E501
        :type key: str
        :param ttl: The ttl of this Context.  # noqa: E501
        :type ttl: str
        """
        self.swagger_types = {
            'domain': Domain,
            'country': str,
            'city': str,
            'action': str,
            'core_version': str,
            'bap_id': str,
            'bap_uri': str,
            'bpp_id': str,
            'bpp_uri': str,
            'transaction_id': str,
            'message_id': str,
            'timestamp': datetime,
            'key': str,
            'ttl': str
        }

        self.attribute_map = {
            'domain': 'domain',
            'country': 'country',
            'city': 'city',
            'action': 'action',
            'core_version': 'core_version',
            'bap_id': 'bap_id',
            'bap_uri': 'bap_uri',
            'bpp_id': 'bpp_id',
            'bpp_uri': 'bpp_uri',
            'transaction_id': 'transaction_id',
            'message_id': 'message_id',
            'timestamp': 'timestamp',
            'key': 'key',
            'ttl': 'ttl'
        }
        self._domain = domain
        self._country = country
        self._city = city
        self._action = action
        self._core_version = core_version
        self._bap_id = bap_id
        self._bap_uri = bap_uri
        self._bpp_id = bpp_id
        self._bpp_uri = bpp_uri
        self._transaction_id = transaction_id
        self._message_id = message_id
        self._timestamp = timestamp
        self._key = key
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt) -> 'Context':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Context of this Context.  # noqa: E501
        :rtype: Context
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self) -> Domain:
        """Gets the domain of this Context.


        :return: The domain of this Context.
        :rtype: Domain
        """
        return self._domain

    @domain.setter
    def domain(self, domain: Domain):
        """Sets the domain of this Context.


        :param domain: The domain of this Context.
        :type domain: Domain
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def country(self) -> str:
        """Gets the country of this Context.


        :return: The country of this Context.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this Context.


        :param country: The country of this Context.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def city(self) -> str:
        """Gets the city of this Context.


        :return: The city of this Context.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this Context.


        :param city: The city of this Context.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def action(self) -> str:
        """Gets the action of this Context.

        Defines the Beckn API call. Any actions other than the enumerated actions are not supported by Beckn Protocol  # noqa: E501

        :return: The action of this Context.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action: str):
        """Sets the action of this Context.

        Defines the Beckn API call. Any actions other than the enumerated actions are not supported by Beckn Protocol  # noqa: E501

        :param action: The action of this Context.
        :type action: str
        """
        allowed_values = ["search", "select", "init", "confirm", "update", "status", "track", "cancel", "rating", "support", "on_search", "on_select", "on_init", "on_confirm", "on_update", "on_status", "on_track", "on_cancel", "on_rating", "on_support"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def core_version(self) -> str:
        """Gets the core_version of this Context.

        Version of Beckn core API specification being used  # noqa: E501

        :return: The core_version of this Context.
        :rtype: str
        """
        return self._core_version

    @core_version.setter
    def core_version(self, core_version: str):
        """Sets the core_version of this Context.

        Version of Beckn core API specification being used  # noqa: E501

        :param core_version: The core_version of this Context.
        :type core_version: str
        """
        if core_version is None:
            raise ValueError("Invalid value for `core_version`, must not be `None`")  # noqa: E501

        self._core_version = core_version

    @property
    def bap_id(self) -> str:
        """Gets the bap_id of this Context.

        Unique id of the BAP. By default it is the fully qualified domain name of the BAP  # noqa: E501

        :return: The bap_id of this Context.
        :rtype: str
        """
        return self._bap_id

    @bap_id.setter
    def bap_id(self, bap_id: str):
        """Sets the bap_id of this Context.

        Unique id of the BAP. By default it is the fully qualified domain name of the BAP  # noqa: E501

        :param bap_id: The bap_id of this Context.
        :type bap_id: str
        """
        if bap_id is None:
            raise ValueError("Invalid value for `bap_id`, must not be `None`")  # noqa: E501

        self._bap_id = bap_id

    @property
    def bap_uri(self) -> str:
        """Gets the bap_uri of this Context.

        URI of the BAP for accepting callbacks. Must have the same domain name as the bap_id  # noqa: E501

        :return: The bap_uri of this Context.
        :rtype: str
        """
        return self._bap_uri

    @bap_uri.setter
    def bap_uri(self, bap_uri: str):
        """Sets the bap_uri of this Context.

        URI of the BAP for accepting callbacks. Must have the same domain name as the bap_id  # noqa: E501

        :param bap_uri: The bap_uri of this Context.
        :type bap_uri: str
        """
        if bap_uri is None:
            raise ValueError("Invalid value for `bap_uri`, must not be `None`")  # noqa: E501

        self._bap_uri = bap_uri

    @property
    def bpp_id(self) -> str:
        """Gets the bpp_id of this Context.

        Unique id of the BPP. By default it is the fully qualified domain name of the BPP  # noqa: E501

        :return: The bpp_id of this Context.
        :rtype: str
        """
        return self._bpp_id

    @bpp_id.setter
    def bpp_id(self, bpp_id: str):
        """Sets the bpp_id of this Context.

        Unique id of the BPP. By default it is the fully qualified domain name of the BPP  # noqa: E501

        :param bpp_id: The bpp_id of this Context.
        :type bpp_id: str
        """

        self._bpp_id = bpp_id

    @property
    def bpp_uri(self) -> str:
        """Gets the bpp_uri of this Context.

        URI of the BPP. Must have the same domain name as the bap_id  # noqa: E501

        :return: The bpp_uri of this Context.
        :rtype: str
        """
        return self._bpp_uri

    @bpp_uri.setter
    def bpp_uri(self, bpp_uri: str):
        """Sets the bpp_uri of this Context.

        URI of the BPP. Must have the same domain name as the bap_id  # noqa: E501

        :param bpp_uri: The bpp_uri of this Context.
        :type bpp_uri: str
        """

        self._bpp_uri = bpp_uri

    @property
    def transaction_id(self) -> str:
        """Gets the transaction_id of this Context.

        This is a unique value which persists across all API calls from search through confirm  # noqa: E501

        :return: The transaction_id of this Context.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id: str):
        """Sets the transaction_id of this Context.

        This is a unique value which persists across all API calls from search through confirm  # noqa: E501

        :param transaction_id: The transaction_id of this Context.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")  # noqa: E501

        self._transaction_id = transaction_id

    @property
    def message_id(self) -> str:
        """Gets the message_id of this Context.

        This is a unique value which persists during a request / callback cycle  # noqa: E501

        :return: The message_id of this Context.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id: str):
        """Sets the message_id of this Context.

        This is a unique value which persists during a request / callback cycle  # noqa: E501

        :param message_id: The message_id of this Context.
        :type message_id: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")  # noqa: E501

        self._message_id = message_id

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this Context.

        Time of request generation in RFC3339 format  # noqa: E501

        :return: The timestamp of this Context.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this Context.

        Time of request generation in RFC3339 format  # noqa: E501

        :param timestamp: The timestamp of this Context.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def key(self) -> str:
        """Gets the key of this Context.

        The encryption public key of the sender  # noqa: E501

        :return: The key of this Context.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this Context.

        The encryption public key of the sender  # noqa: E501

        :param key: The key of this Context.
        :type key: str
        """

        self._key = key

    @property
    def ttl(self) -> str:
        """Gets the ttl of this Context.

        The duration in ISO8601 format after timestamp for which this message holds valid  # noqa: E501

        :return: The ttl of this Context.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl: str):
        """Sets the ttl of this Context.

        The duration in ISO8601 format after timestamp for which this message holds valid  # noqa: E501

        :param ttl: The ttl of this Context.
        :type ttl: str
        """

        self._ttl = ttl
