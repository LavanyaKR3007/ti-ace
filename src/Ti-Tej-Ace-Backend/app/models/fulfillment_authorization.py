# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model


class FulfillmentAuthorization(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, token: str=None, valid_from: datetime=None, valid_to: datetime=None):  # noqa: E501
        """FulfillmentAuthorization - a model defined in Swagger

        :param type: The type of this FulfillmentAuthorization.  # noqa: E501
        :type type: str
        :param token: The token of this FulfillmentAuthorization.  # noqa: E501
        :type token: str
        :param valid_from: The valid_from of this FulfillmentAuthorization.  # noqa: E501
        :type valid_from: datetime
        :param valid_to: The valid_to of this FulfillmentAuthorization.  # noqa: E501
        :type valid_to: datetime
        """
        self.swagger_types = {
            'type': str,
            'token': str,
            'valid_from': datetime,
            'valid_to': datetime
        }

        self.attribute_map = {
            'type': 'type',
            'token': 'token',
            'valid_from': 'valid_from',
            'valid_to': 'valid_to'
        }
        self._type = type
        self._token = token
        self._valid_from = valid_from
        self._valid_to = valid_to

    @classmethod
    def from_dict(cls, dikt) -> 'FulfillmentAuthorization':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FulfillmentAuthorization of this FulfillmentAuthorization.  # noqa: E501
        :rtype: FulfillmentAuthorization
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this FulfillmentAuthorization.

        Type of authorization mechanism used. If this value is equal to IMAGE, then the BAP must render this image as-is. If this value is a STING, then the BAP must clearly display the string to the user. It is recommended that the string be displayed in a way that it can be copied to the clipboard.  # noqa: E501

        :return: The type of this FulfillmentAuthorization.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this FulfillmentAuthorization.

        Type of authorization mechanism used. If this value is equal to IMAGE, then the BAP must render this image as-is. If this value is a STING, then the BAP must clearly display the string to the user. It is recommended that the string be displayed in a way that it can be copied to the clipboard.  # noqa: E501

        :param type: The type of this FulfillmentAuthorization.
        :type type: str
        """
        allowed_values = ["IMAGE", "STRING"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def token(self) -> str:
        """Gets the token of this FulfillmentAuthorization.

        The code displayed to the user for authorizing the start or end of fulfillment. This code must be provided to the fufillment agent before the start and/or end of the fulfillment.  # noqa: E501

        :return: The token of this FulfillmentAuthorization.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token: str):
        """Sets the token of this FulfillmentAuthorization.

        The code displayed to the user for authorizing the start or end of fulfillment. This code must be provided to the fufillment agent before the start and/or end of the fulfillment.  # noqa: E501

        :param token: The token of this FulfillmentAuthorization.
        :type token: str
        """

        self._token = token

    @property
    def valid_from(self) -> datetime:
        """Gets the valid_from of this FulfillmentAuthorization.

        Date and time from which token is valid. This token must be shown to the BAP user only after this time.  # noqa: E501

        :return: The valid_from of this FulfillmentAuthorization.
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from: datetime):
        """Sets the valid_from of this FulfillmentAuthorization.

        Date and time from which token is valid. This token must be shown to the BAP user only after this time.  # noqa: E501

        :param valid_from: The valid_from of this FulfillmentAuthorization.
        :type valid_from: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self) -> datetime:
        """Gets the valid_to of this FulfillmentAuthorization.

        Date and time till which token is valid. This token must NOT be shown to the BAP user after this time.  # noqa: E501

        :return: The valid_to of this FulfillmentAuthorization.
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to: datetime):
        """Sets the valid_to of this FulfillmentAuthorization.

        Date and time till which token is valid. This token must NOT be shown to the BAP user after this time.  # noqa: E501

        :param valid_to: The valid_to of this FulfillmentAuthorization.
        :type valid_to: datetime
        """

        self._valid_to = valid_to
