# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model


class Error(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, code: str=None, path: str=None, message: str=None):  # noqa: E501
        """Error - a model defined in Swagger

        :param type: The type of this Error.  # noqa: E501
        :type type: str
        :param code: The code of this Error.  # noqa: E501
        :type code: str
        :param path: The path of this Error.  # noqa: E501
        :type path: str
        :param message: The message of this Error.  # noqa: E501
        :type message: str
        """
        self.swagger_types = {
            'type': str,
            'code': str,
            'path': str,
            'message': str
        }

        self.attribute_map = {
            'type': 'type',
            'code': 'code',
            'path': 'path',
            'message': 'message'
        }
        self._type = type
        self._code = code
        self._path = path
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Error of this Error.  # noqa: E501
        :rtype: Error
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Error.


        :return: The type of this Error.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Error.


        :param type: The type of this Error.
        :type type: str
        """
        allowed_values = ["CONTEXT-ERROR", "CORE-ERROR", "DOMAIN-ERROR", "POLICY-ERROR", "JSON-SCHEMA-ERROR"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def code(self) -> str:
        """Gets the code of this Error.

        Beckn specific error code. For full list of error codes, refer to docs/protocol-drafts/BECKN-RFC-005-ERROR-CODES-DRAFT-01.md of this repo  # noqa: E501

        :return: The code of this Error.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this Error.

        Beckn specific error code. For full list of error codes, refer to docs/protocol-drafts/BECKN-RFC-005-ERROR-CODES-DRAFT-01.md of this repo  # noqa: E501

        :param code: The code of this Error.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def path(self) -> str:
        """Gets the path of this Error.

        Path to json schema generating the error. Used only during json schema validation errors  # noqa: E501

        :return: The path of this Error.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this Error.

        Path to json schema generating the error. Used only during json schema validation errors  # noqa: E501

        :param path: The path of this Error.
        :type path: str
        """

        self._path = path

    @property
    def message(self) -> str:
        """Gets the message of this Error.

        Human readable message describing the error  # noqa: E501

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Error.

        Human readable message describing the error  # noqa: E501

        :param message: The message of this Error.
        :type message: str
        """

        self._message = message
