# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model
from models.fee import Fee  # noqa: F401,E501


class CancellationPolicy(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cancellable: bool=None, cancel_before: datetime=None, cancellation_fee: Fee=None, fee_applied_on: str=None, type: str=None):  # noqa: E501
        """CancellationPolicy - a model defined in Swagger

        :param cancellable: The cancellable of this CancellationPolicy.  # noqa: E501
        :type cancellable: bool
        :param cancel_before: The cancel_before of this CancellationPolicy.  # noqa: E501
        :type cancel_before: datetime
        :param cancellation_fee: The cancellation_fee of this CancellationPolicy.  # noqa: E501
        :type cancellation_fee: Fee
        :param fee_applied_on: The fee_applied_on of this CancellationPolicy.  # noqa: E501
        :type fee_applied_on: str
        :param type: The type of this CancellationPolicy.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'cancellable': bool,
            'cancel_before': datetime,
            'cancellation_fee': Fee,
            'fee_applied_on': str,
            'type': str
        }

        self.attribute_map = {
            'cancellable': 'cancellable',
            'cancel_before': 'cancel_before',
            'cancellation_fee': 'cancellation_fee',
            'fee_applied_on': 'fee_applied_on',
            'type': 'type'
        }
        self._cancellable = cancellable
        self._cancel_before = cancel_before
        self._cancellation_fee = cancellation_fee
        self._fee_applied_on = fee_applied_on
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'CancellationPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CancellationPolicy of this CancellationPolicy.  # noqa: E501
        :rtype: CancellationPolicy
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancellable(self) -> bool:
        """Gets the cancellable of this CancellationPolicy.


        :return: The cancellable of this CancellationPolicy.
        :rtype: bool
        """
        return self._cancellable

    @cancellable.setter
    def cancellable(self, cancellable: bool):
        """Sets the cancellable of this CancellationPolicy.


        :param cancellable: The cancellable of this CancellationPolicy.
        :type cancellable: bool
        """

        self._cancellable = cancellable

    @property
    def cancel_before(self) -> datetime:
        """Gets the cancel_before of this CancellationPolicy.


        :return: The cancel_before of this CancellationPolicy.
        :rtype: datetime
        """
        return self._cancel_before

    @cancel_before.setter
    def cancel_before(self, cancel_before: datetime):
        """Sets the cancel_before of this CancellationPolicy.


        :param cancel_before: The cancel_before of this CancellationPolicy.
        :type cancel_before: datetime
        """

        self._cancel_before = cancel_before

    @property
    def cancellation_fee(self) -> Fee:
        """Gets the cancellation_fee of this CancellationPolicy.


        :return: The cancellation_fee of this CancellationPolicy.
        :rtype: Fee
        """
        return self._cancellation_fee

    @cancellation_fee.setter
    def cancellation_fee(self, cancellation_fee: Fee):
        """Sets the cancellation_fee of this CancellationPolicy.


        :param cancellation_fee: The cancellation_fee of this CancellationPolicy.
        :type cancellation_fee: Fee
        """

        self._cancellation_fee = cancellation_fee

    @property
    def fee_applied_on(self) -> str:
        """Gets the fee_applied_on of this CancellationPolicy.


        :return: The fee_applied_on of this CancellationPolicy.
        :rtype: str
        """
        return self._fee_applied_on

    @fee_applied_on.setter
    def fee_applied_on(self, fee_applied_on: str):
        """Sets the fee_applied_on of this CancellationPolicy.


        :param fee_applied_on: The fee_applied_on of this CancellationPolicy.
        :type fee_applied_on: str
        """
        allowed_values = ["CURRENT-ORDER", "NEXT-ORDER"]  # noqa: E501
        if fee_applied_on not in allowed_values:
            raise ValueError(
                "Invalid value for `fee_applied_on` ({0}), must be one of {1}"
                .format(fee_applied_on, allowed_values)
            )

        self._fee_applied_on = fee_applied_on

    @property
    def type(self) -> str:
        """Gets the type of this CancellationPolicy.


        :return: The type of this CancellationPolicy.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this CancellationPolicy.


        :param type: The type of this CancellationPolicy.
        :type type: str
        """
        allowed_values = ["full", "partial"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
