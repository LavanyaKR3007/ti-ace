# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model
from models.descriptor import Descriptor  # noqa: F401,E501
from models.price import Price  # noqa: F401,E501


class AddOn(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, item_id: str=None, optional: bool=False, descriptor: Descriptor=None, price: Price=None):  # noqa: E501
        """AddOn - a model defined in Swagger

        :param id: The id of this AddOn.  # noqa: E501
        :type id: str
        :param item_id: The item_id of this AddOn.  # noqa: E501
        :type item_id: str
        :param optional: The optional of this AddOn.  # noqa: E501
        :type optional: bool
        :param descriptor: The descriptor of this AddOn.  # noqa: E501
        :type descriptor: Descriptor
        :param price: The price of this AddOn.  # noqa: E501
        :type price: Price
        """
        self.swagger_types = {
            'id': str,
            'item_id': str,
            'optional': bool,
            'descriptor': Descriptor,
            'price': Price
        }

        self.attribute_map = {
            'id': 'id',
            'item_id': 'item_id',
            'optional': 'optional',
            'descriptor': 'descriptor',
            'price': 'price'
        }
        self._id = id
        self._item_id = item_id
        self._optional = optional
        self._descriptor = descriptor
        self._price = price

    @classmethod
    def from_dict(cls, dikt) -> 'AddOn':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AddOn of this AddOn.  # noqa: E501
        :rtype: AddOn
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this AddOn.

        ID of the add-on as present in the source catalog  # noqa: E501

        :return: The id of this AddOn.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this AddOn.

        ID of the add-on as present in the source catalog  # noqa: E501

        :param id: The id of this AddOn.
        :type id: str
        """

        self._id = id

    @property
    def item_id(self) -> str:
        """Gets the item_id of this AddOn.

        ID of the item this add-on is offered with.  # noqa: E501

        :return: The item_id of this AddOn.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id: str):
        """Sets the item_id of this AddOn.

        ID of the item this add-on is offered with.  # noqa: E501

        :param item_id: The item_id of this AddOn.
        :type item_id: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501

        self._item_id = item_id

    @property
    def optional(self) -> bool:
        """Gets the optional of this AddOn.

        This value indicates if the add-on is optional or required to be selected by the user along with an Item. If this value is set to true, then the BAP must ensure that the add-on is mandatorily selected by the user while creating the Order object with the Item.  # noqa: E501

        :return: The optional of this AddOn.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional: bool):
        """Sets the optional of this AddOn.

        This value indicates if the add-on is optional or required to be selected by the user along with an Item. If this value is set to true, then the BAP must ensure that the add-on is mandatorily selected by the user while creating the Order object with the Item.  # noqa: E501

        :param optional: The optional of this AddOn.
        :type optional: bool
        """

        self._optional = optional

    @property
    def descriptor(self) -> Descriptor:
        """Gets the descriptor of this AddOn.


        :return: The descriptor of this AddOn.
        :rtype: Descriptor
        """
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor: Descriptor):
        """Sets the descriptor of this AddOn.


        :param descriptor: The descriptor of this AddOn.
        :type descriptor: Descriptor
        """

        self._descriptor = descriptor

    @property
    def price(self) -> Price:
        """Gets the price of this AddOn.


        :return: The price of this AddOn.
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price: Price):
        """Sets the price of this AddOn.


        :param price: The price of this AddOn.
        :type price: Price
        """

        self._price = price
