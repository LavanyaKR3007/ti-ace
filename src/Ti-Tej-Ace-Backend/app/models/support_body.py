# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model
from models.context import Context  # noqa: F401,E501
from models.support_message import SupportMessage  # noqa: F401,E501


class SupportBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, context: Context=None, message: SupportMessage=None):  # noqa: E501
        """SupportBody - a model defined in Swagger

        :param context: The context of this SupportBody.  # noqa: E501
        :type context: Context
        :param message: The message of this SupportBody.  # noqa: E501
        :type message: SupportMessage
        """
        self.swagger_types = {
            'context': Context,
            'message': SupportMessage
        }

        self.attribute_map = {
            'context': 'context',
            'message': 'message'
        }
        self._context = context
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'SupportBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The support_body of this SupportBody.  # noqa: E501
        :rtype: SupportBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self) -> Context:
        """Gets the context of this SupportBody.


        :return: The context of this SupportBody.
        :rtype: Context
        """
        return self._context

    @context.setter
    def context(self, context: Context):
        """Sets the context of this SupportBody.


        :param context: The context of this SupportBody.
        :type context: Context
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501

        self._context = context

    @property
    def message(self) -> SupportMessage:
        """Gets the message of this SupportBody.


        :return: The message of this SupportBody.
        :rtype: SupportMessage
        """
        return self._message

    @message.setter
    def message(self, message: SupportMessage):
        """Sets the message of this SupportBody.


        :param message: The message of this SupportBody.
        :type message: SupportMessage
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message
