# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model
from models.scalar_range import ScalarRange  # noqa: F401,E501


class Scalar(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, value: float=None, estimated_value: float=None, computed_value: float=None, range: ScalarRange=None, unit: str=None):  # noqa: E501
        """Scalar - a model defined in Swagger

        :param type: The type of this Scalar.  # noqa: E501
        :type type: str
        :param value: The value of this Scalar.  # noqa: E501
        :type value: float
        :param estimated_value: The estimated_value of this Scalar.  # noqa: E501
        :type estimated_value: float
        :param computed_value: The computed_value of this Scalar.  # noqa: E501
        :type computed_value: float
        :param range: The range of this Scalar.  # noqa: E501
        :type range: ScalarRange
        :param unit: The unit of this Scalar.  # noqa: E501
        :type unit: str
        """
        self.swagger_types = {
            'type': str,
            'value': float,
            'estimated_value': float,
            'computed_value': float,
            'range': ScalarRange,
            'unit': str
        }

        self.attribute_map = {
            'type': 'type',
            'value': 'value',
            'estimated_value': 'estimated_value',
            'computed_value': 'computed_value',
            'range': 'range',
            'unit': 'unit'
        }
        self._type = type
        self._value = value
        self._estimated_value = estimated_value
        self._computed_value = computed_value
        self._range = range
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt) -> 'Scalar':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Scalar of this Scalar.  # noqa: E501
        :rtype: Scalar
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Scalar.


        :return: The type of this Scalar.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Scalar.


        :param type: The type of this Scalar.
        :type type: str
        """
        allowed_values = ["CONSTANT", "VARIABLE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self) -> float:
        """Gets the value of this Scalar.


        :return: The value of this Scalar.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this Scalar.


        :param value: The value of this Scalar.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def estimated_value(self) -> float:
        """Gets the estimated_value of this Scalar.


        :return: The estimated_value of this Scalar.
        :rtype: float
        """
        return self._estimated_value

    @estimated_value.setter
    def estimated_value(self, estimated_value: float):
        """Sets the estimated_value of this Scalar.


        :param estimated_value: The estimated_value of this Scalar.
        :type estimated_value: float
        """

        self._estimated_value = estimated_value

    @property
    def computed_value(self) -> float:
        """Gets the computed_value of this Scalar.


        :return: The computed_value of this Scalar.
        :rtype: float
        """
        return self._computed_value

    @computed_value.setter
    def computed_value(self, computed_value: float):
        """Sets the computed_value of this Scalar.


        :param computed_value: The computed_value of this Scalar.
        :type computed_value: float
        """

        self._computed_value = computed_value

    @property
    def range(self) -> ScalarRange:
        """Gets the range of this Scalar.


        :return: The range of this Scalar.
        :rtype: ScalarRange
        """
        return self._range

    @range.setter
    def range(self, range: ScalarRange):
        """Sets the range of this Scalar.


        :param range: The range of this Scalar.
        :type range: ScalarRange
        """

        self._range = range

    @property
    def unit(self) -> str:
        """Gets the unit of this Scalar.


        :return: The unit of this Scalar.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this Scalar.


        :param unit: The unit of this Scalar.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit
