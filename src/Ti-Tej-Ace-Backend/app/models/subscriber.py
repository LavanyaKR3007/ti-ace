# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model
from models import str  # noqa: F401,E501
from models import str  # noqa: F401,E501
from models.domain import Domain  # noqa: F401,E501


class Subscriber(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, subscriber_id: str=None, type: str=None, cb_url: str=None, domain: Domain=None, city: str=None, country: str=None, signing_public_key: str=None, encryption_public_key: str=None, status: str=None, created: datetime=None, updated: datetime=None, expires: datetime=None):  # noqa: E501
        """Subscriber - a model defined in Swagger

        :param subscriber_id: The subscriber_id of this Subscriber.  # noqa: E501
        :type subscriber_id: str
        :param type: The type of this Subscriber.  # noqa: E501
        :type type: str
        :param cb_url: The cb_url of this Subscriber.  # noqa: E501
        :type cb_url: str
        :param domain: The domain of this Subscriber.  # noqa: E501
        :type domain: Domain
        :param city: The city of this Subscriber.  # noqa: E501
        :type city: str
        :param country: The country of this Subscriber.  # noqa: E501
        :type country: str
        :param signing_public_key: The signing_public_key of this Subscriber.  # noqa: E501
        :type signing_public_key: str
        :param encryption_public_key: The encryption_public_key of this Subscriber.  # noqa: E501
        :type encryption_public_key: str
        :param status: The status of this Subscriber.  # noqa: E501
        :type status: str
        :param created: The created of this Subscriber.  # noqa: E501
        :type created: datetime
        :param updated: The updated of this Subscriber.  # noqa: E501
        :type updated: datetime
        :param expires: The expires of this Subscriber.  # noqa: E501
        :type expires: datetime
        """
        self.swagger_types = {
            'subscriber_id': str,
            'type': str,
            'cb_url': str,
            'domain': Domain,
            'city': str,
            'country': str,
            'signing_public_key': str,
            'encryption_public_key': str,
            'status': str,
            'created': datetime,
            'updated': datetime,
            'expires': datetime
        }

        self.attribute_map = {
            'subscriber_id': 'subscriber_id',
            'type': 'type',
            'cb_url': 'cb_url',
            'domain': 'domain',
            'city': 'city',
            'country': 'country',
            'signing_public_key': 'signing_public_key',
            'encryption_public_key': 'encryption_public_key',
            'status': 'status',
            'created': 'created',
            'updated': 'updated',
            'expires': 'expires'
        }
        self._subscriber_id = subscriber_id
        self._type = type
        self._cb_url = cb_url
        self._domain = domain
        self._city = city
        self._country = country
        self._signing_public_key = signing_public_key
        self._encryption_public_key = encryption_public_key
        self._status = status
        self._created = created
        self._updated = updated
        self._expires = expires

    @classmethod
    def from_dict(cls, dikt) -> 'Subscriber':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Subscriber of this Subscriber.  # noqa: E501
        :rtype: Subscriber
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscriber_id(self) -> str:
        """Gets the subscriber_id of this Subscriber.

        Registered domain name of the subscriber. Must have a valid SSL certificate issued by a Certificate Authority of the operating region  # noqa: E501

        :return: The subscriber_id of this Subscriber.
        :rtype: str
        """
        return self._subscriber_id

    @subscriber_id.setter
    def subscriber_id(self, subscriber_id: str):
        """Sets the subscriber_id of this Subscriber.

        Registered domain name of the subscriber. Must have a valid SSL certificate issued by a Certificate Authority of the operating region  # noqa: E501

        :param subscriber_id: The subscriber_id of this Subscriber.
        :type subscriber_id: str
        """

        self._subscriber_id = subscriber_id

    @property
    def type(self) -> str:
        """Gets the type of this Subscriber.


        :return: The type of this Subscriber.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Subscriber.


        :param type: The type of this Subscriber.
        :type type: str
        """
        allowed_values = ["bap", "bpp", "bg", "bppr", "bgr"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def cb_url(self) -> str:
        """Gets the cb_url of this Subscriber.

        Callback URL of the subscriber. The Registry will call this URL's on_subscribe API to validate the subscriber\\'s credentials  # noqa: E501

        :return: The cb_url of this Subscriber.
        :rtype: str
        """
        return self._cb_url

    @cb_url.setter
    def cb_url(self, cb_url: str):
        """Sets the cb_url of this Subscriber.

        Callback URL of the subscriber. The Registry will call this URL's on_subscribe API to validate the subscriber\\'s credentials  # noqa: E501

        :param cb_url: The cb_url of this Subscriber.
        :type cb_url: str
        """

        self._cb_url = cb_url

    @property
    def domain(self) -> Domain:
        """Gets the domain of this Subscriber.


        :return: The domain of this Subscriber.
        :rtype: Domain
        """
        return self._domain

    @domain.setter
    def domain(self, domain: Domain):
        """Sets the domain of this Subscriber.


        :param domain: The domain of this Subscriber.
        :type domain: Domain
        """

        self._domain = domain

    @property
    def city(self) -> str:
        """Gets the city of this Subscriber.


        :return: The city of this Subscriber.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this Subscriber.


        :param city: The city of this Subscriber.
        :type city: str
        """

        self._city = city

    @property
    def country(self) -> str:
        """Gets the country of this Subscriber.


        :return: The country of this Subscriber.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this Subscriber.


        :param country: The country of this Subscriber.
        :type country: str
        """

        self._country = country

    @property
    def signing_public_key(self) -> str:
        """Gets the signing_public_key of this Subscriber.

        Signing Public key of the subscriber. <br/><br/>Any subscriber platform (BAP, BPP, BG) who wants to transact on the network must digitally sign the ```requestBody``` using the corresponding private key of this public key and send it in the transport layer header. In case of ```HTTP``` it is the ```Authorization``` header. <br><br/>The ```Authorization``` will be used to validate the signature of a BAP or BPP.<br/><br/>Furthermore, if an API call is being proxied or multicast by a Beckn Gateway, the BG must use it\\'s signing key to digitally sign the ```requestBody``` using the corresponding private key of this public key and send it in the ```X-Gateway-Authorization``` header.  # noqa: E501

        :return: The signing_public_key of this Subscriber.
        :rtype: str
        """
        return self._signing_public_key

    @signing_public_key.setter
    def signing_public_key(self, signing_public_key: str):
        """Sets the signing_public_key of this Subscriber.

        Signing Public key of the subscriber. <br/><br/>Any subscriber platform (BAP, BPP, BG) who wants to transact on the network must digitally sign the ```requestBody``` using the corresponding private key of this public key and send it in the transport layer header. In case of ```HTTP``` it is the ```Authorization``` header. <br><br/>The ```Authorization``` will be used to validate the signature of a BAP or BPP.<br/><br/>Furthermore, if an API call is being proxied or multicast by a Beckn Gateway, the BG must use it\\'s signing key to digitally sign the ```requestBody``` using the corresponding private key of this public key and send it in the ```X-Gateway-Authorization``` header.  # noqa: E501

        :param signing_public_key: The signing_public_key of this Subscriber.
        :type signing_public_key: str
        """

        self._signing_public_key = signing_public_key

    @property
    def encryption_public_key(self) -> str:
        """Gets the encryption_public_key of this Subscriber.

        Encryption public key of the BAP subscriber. Any BPP must encrypt the ```requestBody.message``` value of the ```on_search``` API using this public key.  # noqa: E501

        :return: The encryption_public_key of this Subscriber.
        :rtype: str
        """
        return self._encryption_public_key

    @encryption_public_key.setter
    def encryption_public_key(self, encryption_public_key: str):
        """Sets the encryption_public_key of this Subscriber.

        Encryption public key of the BAP subscriber. Any BPP must encrypt the ```requestBody.message``` value of the ```on_search``` API using this public key.  # noqa: E501

        :param encryption_public_key: The encryption_public_key of this Subscriber.
        :type encryption_public_key: str
        """

        self._encryption_public_key = encryption_public_key

    @property
    def status(self) -> str:
        """Gets the status of this Subscriber.


        :return: The status of this Subscriber.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Subscriber.


        :param status: The status of this Subscriber.
        :type status: str
        """
        allowed_values = ["INITIATED", "UNDER_SUBSCRIPTION", "SUBSCRIBED", "INVALID_SSL", "UNSUBSCRIBED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created(self) -> datetime:
        """Gets the created of this Subscriber.

        Timestamp when a subscriber was added to the registry with status = INITIATED  # noqa: E501

        :return: The created of this Subscriber.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created: datetime):
        """Sets the created of this Subscriber.

        Timestamp when a subscriber was added to the registry with status = INITIATED  # noqa: E501

        :param created: The created of this Subscriber.
        :type created: datetime
        """

        self._created = created

    @property
    def updated(self) -> datetime:
        """Gets the updated of this Subscriber.


        :return: The updated of this Subscriber.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated: datetime):
        """Sets the updated of this Subscriber.


        :param updated: The updated of this Subscriber.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def expires(self) -> datetime:
        """Gets the expires of this Subscriber.

        Expiry timestamp in UTC derived from the ```lease_time``` of the subscriber  # noqa: E501

        :return: The expires of this Subscriber.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires: datetime):
        """Sets the expires of this Subscriber.

        Expiry timestamp in UTC derived from the ```lease_time``` of the subscriber  # noqa: E501

        :param expires: The expires of this Subscriber.
        :type expires: datetime
        """

        self._expires = expires
