# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model
from models.feedback_url_params import FeedbackUrlParams  # noqa: F401,E501


class FeedbackUrl(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, url: str=None, tl_method: str=None, params: FeedbackUrlParams=None):  # noqa: E501
        """FeedbackUrl - a model defined in Swagger

        :param url: The url of this FeedbackUrl.  # noqa: E501
        :type url: str
        :param tl_method: The tl_method of this FeedbackUrl.  # noqa: E501
        :type tl_method: str
        :param params: The params of this FeedbackUrl.  # noqa: E501
        :type params: FeedbackUrlParams
        """
        self.swagger_types = {
            'url': str,
            'tl_method': str,
            'params': FeedbackUrlParams
        }

        self.attribute_map = {
            'url': 'url',
            'tl_method': 'tl_method',
            'params': 'params'
        }
        self._url = url
        self._tl_method = tl_method
        self._params = params

    @classmethod
    def from_dict(cls, dikt) -> 'FeedbackUrl':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeedbackUrl of this FeedbackUrl.  # noqa: E501
        :rtype: FeedbackUrl
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self) -> str:
        """Gets the url of this FeedbackUrl.

        feedback URL sent by the BPP  # noqa: E501

        :return: The url of this FeedbackUrl.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this FeedbackUrl.

        feedback URL sent by the BPP  # noqa: E501

        :param url: The url of this FeedbackUrl.
        :type url: str
        """

        self._url = url

    @property
    def tl_method(self) -> str:
        """Gets the tl_method of this FeedbackUrl.


        :return: The tl_method of this FeedbackUrl.
        :rtype: str
        """
        return self._tl_method

    @tl_method.setter
    def tl_method(self, tl_method: str):
        """Sets the tl_method of this FeedbackUrl.


        :param tl_method: The tl_method of this FeedbackUrl.
        :type tl_method: str
        """
        allowed_values = ["http/get", "http/post"]  # noqa: E501
        if tl_method not in allowed_values:
            raise ValueError(
                "Invalid value for `tl_method` ({0}), must be one of {1}"
                .format(tl_method, allowed_values)
            )

        self._tl_method = tl_method

    @property
    def params(self) -> FeedbackUrlParams:
        """Gets the params of this FeedbackUrl.


        :return: The params of this FeedbackUrl.
        :rtype: FeedbackUrlParams
        """
        return self._params

    @params.setter
    def params(self, params: FeedbackUrlParams):
        """Sets the params of this FeedbackUrl.


        :param params: The params of this FeedbackUrl.
        :type params: FeedbackUrlParams
        """

        self._params = params
