# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model
from models.billing import Billing  # noqa: F401,E501
from models.document import Document  # noqa: F401,E501
from models.fulfillment import Fulfillment  # noqa: F401,E501
from models.payment import Payment  # noqa: F401,E501
from models.provider import Provider  # noqa: F401,E501
from models.quotation import Quotation  # noqa: F401,E501


class Order(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, state: str=None, provider: Provider=None, documents: List[Document]=None, billing: Billing=None, fulfillment: Fulfillment=None, quote: Quotation=None, payment: Payment=None, created_at: datetime=None, updated_at: datetime=None):  # noqa: E501
        """Order - a model defined in Swagger

        :param id: The id of this Order.  # noqa: E501
        :type id: str
        :param state: The state of this Order.  # noqa: E501
        :type state: str
        :param provider: The provider of this Order.  # noqa: E501
        :type provider: Provider
        :param documents: The documents of this Order.  # noqa: E501
        :type documents: List[Document]
        :param billing: The billing of this Order.  # noqa: E501
        :type billing: Billing
        :param fulfillment: The fulfillment of this Order.  # noqa: E501
        :type fulfillment: Fulfillment
        :param quote: The quote of this Order.  # noqa: E501
        :type quote: Quotation
        :param payment: The payment of this Order.  # noqa: E501
        :type payment: Payment
        :param created_at: The created_at of this Order.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this Order.  # noqa: E501
        :type updated_at: datetime
        """
        self.swagger_types = {
            'id': str,
            'state': str,
            'provider': Provider,
            'documents': List[Document],
            'billing': Billing,
            'fulfillment': Fulfillment,
            'quote': Quotation,
            'payment': Payment,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'state': 'state',
            'provider': 'provider',
            'documents': 'documents',
            'billing': 'billing',
            'fulfillment': 'fulfillment',
            'quote': 'quote',
            'payment': 'payment',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }
        self._id = id
        self._state = state
        self._provider = provider
        self._documents = documents
        self._billing = billing
        self._fulfillment = fulfillment
        self._quote = quote
        self._payment = payment
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order of this Order.  # noqa: E501
        :rtype: Order
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Order.

        Order ID as generated inside the provider's order management system. If the provider is unable to generate an order id, then the BPP must generate this order_id.  # noqa: E501

        :return: The id of this Order.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Order.

        Order ID as generated inside the provider's order management system. If the provider is unable to generate an order id, then the BPP must generate this order_id.  # noqa: E501

        :param id: The id of this Order.
        :type id: str
        """

        self._id = id

    @property
    def state(self) -> str:
        """Gets the state of this Order.

        Describes the state of an order.  # noqa: E501

        :return: The state of this Order.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Order.

        Describes the state of an order.  # noqa: E501

        :param state: The state of this Order.
        :type state: str
        """
        allowed_values = ["DRAFT", "ACTIVE", "COMPLETE", "CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def provider(self) -> Provider:
        """Gets the provider of this Order.


        :return: The provider of this Order.
        :rtype: Provider
        """
        return self._provider

    @provider.setter
    def provider(self, provider: Provider):
        """Sets the provider of this Order.


        :param provider: The provider of this Order.
        :type provider: Provider
        """

        self._provider = provider

    @property
    def documents(self) -> List[Document]:
        """Gets the documents of this Order.


        :return: The documents of this Order.
        :rtype: List[Document]
        """
        return self._documents

    @documents.setter
    def documents(self, documents: List[Document]):
        """Sets the documents of this Order.


        :param documents: The documents of this Order.
        :type documents: List[Document]
        """

        self._documents = documents

    @property
    def billing(self) -> Billing:
        """Gets the billing of this Order.


        :return: The billing of this Order.
        :rtype: Billing
        """
        return self._billing

    @billing.setter
    def billing(self, billing: Billing):
        """Sets the billing of this Order.


        :param billing: The billing of this Order.
        :type billing: Billing
        """

        self._billing = billing

    @property
    def fulfillment(self) -> Fulfillment:
        """Gets the fulfillment of this Order.


        :return: The fulfillment of this Order.
        :rtype: Fulfillment
        """
        return self._fulfillment

    @fulfillment.setter
    def fulfillment(self, fulfillment: Fulfillment):
        """Sets the fulfillment of this Order.


        :param fulfillment: The fulfillment of this Order.
        :type fulfillment: Fulfillment
        """

        self._fulfillment = fulfillment

    @property
    def quote(self) -> Quotation:
        """Gets the quote of this Order.


        :return: The quote of this Order.
        :rtype: Quotation
        """
        return self._quote

    @quote.setter
    def quote(self, quote: Quotation):
        """Sets the quote of this Order.


        :param quote: The quote of this Order.
        :type quote: Quotation
        """

        self._quote = quote

    @property
    def payment(self) -> Payment:
        """Gets the payment of this Order.


        :return: The payment of this Order.
        :rtype: Payment
        """
        return self._payment

    @payment.setter
    def payment(self, payment: Payment):
        """Sets the payment of this Order.


        :param payment: The payment of this Order.
        :type payment: Payment
        """

        self._payment = payment

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Order.


        :return: The created_at of this Order.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Order.


        :param created_at: The created_at of this Order.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Order.


        :return: The updated_at of this Order.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Order.


        :param updated_at: The updated_at of this Order.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
