# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model
from models import FeedbackFormElementpropertiesid  # noqa: F401,E501


class FeedbackFormElement(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, parent_id: FeedbackFormElementpropertiesid=None, question: str=None, answer: str=None, answer_type: str=None):  # noqa: E501
        """FeedbackFormElement - a model defined in Swagger

        :param id: The id of this FeedbackFormElement.  # noqa: E501
        :type id: str
        :param parent_id: The parent_id of this FeedbackFormElement.  # noqa: E501
        :type parent_id: FeedbackFormElementpropertiesid
        :param question: The question of this FeedbackFormElement.  # noqa: E501
        :type question: str
        :param answer: The answer of this FeedbackFormElement.  # noqa: E501
        :type answer: str
        :param answer_type: The answer_type of this FeedbackFormElement.  # noqa: E501
        :type answer_type: str
        """
        self.swagger_types = {
            'id': str,
            'parent_id': FeedbackFormElementpropertiesid,
            'question': str,
            'answer': str,
            'answer_type': str
        }

        self.attribute_map = {
            'id': 'id',
            'parent_id': 'parent_id',
            'question': 'question',
            'answer': 'answer',
            'answer_type': 'answer_type'
        }
        self._id = id
        self._parent_id = parent_id
        self._question = question
        self._answer = answer
        self._answer_type = answer_type

    @classmethod
    def from_dict(cls, dikt) -> 'FeedbackFormElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeedbackFormElement of this FeedbackFormElement.  # noqa: E501
        :rtype: FeedbackFormElement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this FeedbackFormElement.


        :return: The id of this FeedbackFormElement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this FeedbackFormElement.


        :param id: The id of this FeedbackFormElement.
        :type id: str
        """

        self._id = id

    @property
    def parent_id(self) -> FeedbackFormElementpropertiesid:
        """Gets the parent_id of this FeedbackFormElement.


        :return: The parent_id of this FeedbackFormElement.
        :rtype: FeedbackFormElementpropertiesid
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id: FeedbackFormElementpropertiesid):
        """Sets the parent_id of this FeedbackFormElement.


        :param parent_id: The parent_id of this FeedbackFormElement.
        :type parent_id: FeedbackFormElementpropertiesid
        """

        self._parent_id = parent_id

    @property
    def question(self) -> str:
        """Gets the question of this FeedbackFormElement.

        Specifies the question to which the answer options will be contained in the child FeedbackFormElements  # noqa: E501

        :return: The question of this FeedbackFormElement.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question: str):
        """Sets the question of this FeedbackFormElement.

        Specifies the question to which the answer options will be contained in the child FeedbackFormElements  # noqa: E501

        :param question: The question of this FeedbackFormElement.
        :type question: str
        """

        self._question = question

    @property
    def answer(self) -> str:
        """Gets the answer of this FeedbackFormElement.

        Specifies an answer option to which the question will be in the FeedbackFormElement specified in parent_id  # noqa: E501

        :return: The answer of this FeedbackFormElement.
        :rtype: str
        """
        return self._answer

    @answer.setter
    def answer(self, answer: str):
        """Sets the answer of this FeedbackFormElement.

        Specifies an answer option to which the question will be in the FeedbackFormElement specified in parent_id  # noqa: E501

        :param answer: The answer of this FeedbackFormElement.
        :type answer: str
        """

        self._answer = answer

    @property
    def answer_type(self) -> str:
        """Gets the answer_type of this FeedbackFormElement.

        Specifies how the answer option should be rendered.  # noqa: E501

        :return: The answer_type of this FeedbackFormElement.
        :rtype: str
        """
        return self._answer_type

    @answer_type.setter
    def answer_type(self, answer_type: str):
        """Sets the answer_type of this FeedbackFormElement.

        Specifies how the answer option should be rendered.  # noqa: E501

        :param answer_type: The answer_type of this FeedbackFormElement.
        :type answer_type: str
        """
        allowed_values = ["radio", "checkbox", "text"]  # noqa: E501
        if answer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `answer_type` ({0}), must be one of {1}"
                .format(answer_type, allowed_values)
            )

        self._answer_type = answer_type
