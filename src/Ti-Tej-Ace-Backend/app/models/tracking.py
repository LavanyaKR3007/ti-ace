# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model


class Tracking(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, url: str=None, status: str=None):  # noqa: E501
        """Tracking - a model defined in Swagger

        :param url: The url of this Tracking.  # noqa: E501
        :type url: str
        :param status: The status of this Tracking.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'url': str,
            'status': str
        }

        self.attribute_map = {
            'url': 'url',
            'status': 'status'
        }
        self._url = url
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Tracking':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tracking of this Tracking.  # noqa: E501
        :rtype: Tracking
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self) -> str:
        """Gets the url of this Tracking.


        :return: The url of this Tracking.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Tracking.


        :param url: The url of this Tracking.
        :type url: str
        """

        self._url = url

    @property
    def status(self) -> str:
        """Gets the status of this Tracking.


        :return: The status of this Tracking.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Tracking.


        :param status: The status of this Tracking.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
