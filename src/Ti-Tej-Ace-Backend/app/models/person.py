# coding: utf-8

from __future__ import absolute_import

import re  # noqa: F401,E501
from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model
from models.image import Image  # noqa: F401,E501
from models.name import Name  # noqa: F401,E501
from models.tags import Tags  # noqa: F401,E501


class Person(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: Name=None, image: Image=None, dob: date=None, gender: str=None, cred: str=None, tags: Tags=None):  # noqa: E501
        """Person - a model defined in Swagger

        :param name: The name of this Person.  # noqa: E501
        :type name: Name
        :param image: The image of this Person.  # noqa: E501
        :type image: Image
        :param dob: The dob of this Person.  # noqa: E501
        :type dob: date
        :param gender: The gender of this Person.  # noqa: E501
        :type gender: str
        :param cred: The cred of this Person.  # noqa: E501
        :type cred: str
        :param tags: The tags of this Person.  # noqa: E501
        :type tags: Tags
        """
        self.swagger_types = {
            'name': Name,
            'image': Image,
            'dob': date,
            'gender': str,
            'cred': str,
            'tags': Tags
        }

        self.attribute_map = {
            'name': 'name',
            'image': 'image',
            'dob': 'dob',
            'gender': 'gender',
            'cred': 'cred',
            'tags': 'tags'
        }
        self._name = name
        self._image = image
        self._dob = dob
        self._gender = gender
        self._cred = cred
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Person of this Person.  # noqa: E501
        :rtype: Person
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> Name:
        """Gets the name of this Person.


        :return: The name of this Person.
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name: Name):
        """Sets the name of this Person.


        :param name: The name of this Person.
        :type name: Name
        """

        self._name = name

    @property
    def image(self) -> Image:
        """Gets the image of this Person.


        :return: The image of this Person.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image: Image):
        """Sets the image of this Person.


        :param image: The image of this Person.
        :type image: Image
        """

        self._image = image

    @property
    def dob(self) -> date:
        """Gets the dob of this Person.


        :return: The dob of this Person.
        :rtype: date
        """
        return self._dob

    @dob.setter
    def dob(self, dob: date):
        """Sets the dob of this Person.


        :param dob: The dob of this Person.
        :type dob: date
        """

        self._dob = dob

    @property
    def gender(self) -> str:
        """Gets the gender of this Person.

        Gender of something, typically a Person, but possibly also fictional characters, animals, etc. While Male and Female may be used, text strings are also acceptable for people who do not identify as a binary gender  # noqa: E501

        :return: The gender of this Person.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this Person.

        Gender of something, typically a Person, but possibly also fictional characters, animals, etc. While Male and Female may be used, text strings are also acceptable for people who do not identify as a binary gender  # noqa: E501

        :param gender: The gender of this Person.
        :type gender: str
        """

        self._gender = gender

    @property
    def cred(self) -> str:
        """Gets the cred of this Person.


        :return: The cred of this Person.
        :rtype: str
        """
        return self._cred

    @cred.setter
    def cred(self, cred: str):
        """Sets the cred of this Person.


        :param cred: The cred of this Person.
        :type cred: str
        """

        self._cred = cred

    @property
    def tags(self) -> Tags:
        """Gets the tags of this Person.


        :return: The tags of this Person.
        :rtype: Tags
        """
        return self._tags

    @tags.setter
    def tags(self, tags: Tags):
        """Sets the tags of this Person.


        :param tags: The tags of this Person.
        :type tags: Tags
        """

        self._tags = tags
