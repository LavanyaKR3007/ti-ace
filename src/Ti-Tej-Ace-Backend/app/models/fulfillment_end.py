# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model
from models.contact import Contact  # noqa: F401,E501
from models.descriptor import Descriptor  # noqa: F401,E501
from models.fulfillment_authorization import FulfillmentAuthorization  # noqa: F401,E501
from models.location import Location  # noqa: F401,E501
from models.person import Person  # noqa: F401,E501
from models.time import Time  # noqa: F401,E501


class FulfillmentEnd(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, location: Location=None, time: Time=None, instructions: Descriptor=None, contact: Contact=None, person: Person=None, authorization: FulfillmentAuthorization=None):  # noqa: E501
        """FulfillmentEnd - a model defined in Swagger

        :param location: The location of this FulfillmentEnd.  # noqa: E501
        :type location: Location
        :param time: The time of this FulfillmentEnd.  # noqa: E501
        :type time: Time
        :param instructions: The instructions of this FulfillmentEnd.  # noqa: E501
        :type instructions: Descriptor
        :param contact: The contact of this FulfillmentEnd.  # noqa: E501
        :type contact: Contact
        :param person: The person of this FulfillmentEnd.  # noqa: E501
        :type person: Person
        :param authorization: The authorization of this FulfillmentEnd.  # noqa: E501
        :type authorization: FulfillmentAuthorization
        """
        self.swagger_types = {
            'location': Location,
            'time': Time,
            'instructions': Descriptor,
            'contact': Contact,
            'person': Person,
            'authorization': FulfillmentAuthorization
        }

        self.attribute_map = {
            'location': 'location',
            'time': 'time',
            'instructions': 'instructions',
            'contact': 'contact',
            'person': 'person',
            'authorization': 'authorization'
        }
        self._location = location
        self._time = time
        self._instructions = instructions
        self._contact = contact
        self._person = person
        self._authorization = authorization

    @classmethod
    def from_dict(cls, dikt) -> 'FulfillmentEnd':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Fulfillment_end of this FulfillmentEnd.  # noqa: E501
        :rtype: FulfillmentEnd
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self) -> Location:
        """Gets the location of this FulfillmentEnd.


        :return: The location of this FulfillmentEnd.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location: Location):
        """Sets the location of this FulfillmentEnd.


        :param location: The location of this FulfillmentEnd.
        :type location: Location
        """

        self._location = location

    @property
    def time(self) -> Time:
        """Gets the time of this FulfillmentEnd.


        :return: The time of this FulfillmentEnd.
        :rtype: Time
        """
        return self._time

    @time.setter
    def time(self, time: Time):
        """Sets the time of this FulfillmentEnd.


        :param time: The time of this FulfillmentEnd.
        :type time: Time
        """

        self._time = time

    @property
    def instructions(self) -> Descriptor:
        """Gets the instructions of this FulfillmentEnd.


        :return: The instructions of this FulfillmentEnd.
        :rtype: Descriptor
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions: Descriptor):
        """Sets the instructions of this FulfillmentEnd.


        :param instructions: The instructions of this FulfillmentEnd.
        :type instructions: Descriptor
        """

        self._instructions = instructions

    @property
    def contact(self) -> Contact:
        """Gets the contact of this FulfillmentEnd.


        :return: The contact of this FulfillmentEnd.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact: Contact):
        """Sets the contact of this FulfillmentEnd.


        :param contact: The contact of this FulfillmentEnd.
        :type contact: Contact
        """

        self._contact = contact

    @property
    def person(self) -> Person:
        """Gets the person of this FulfillmentEnd.


        :return: The person of this FulfillmentEnd.
        :rtype: Person
        """
        return self._person

    @person.setter
    def person(self, person: Person):
        """Sets the person of this FulfillmentEnd.


        :param person: The person of this FulfillmentEnd.
        :type person: Person
        """

        self._person = person

    @property
    def authorization(self) -> FulfillmentAuthorization:
        """Gets the authorization of this FulfillmentEnd.


        :return: The authorization of this FulfillmentEnd.
        :rtype: FulfillmentAuthorization
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization: FulfillmentAuthorization):
        """Sets the authorization of this FulfillmentEnd.


        :param authorization: The authorization of this FulfillmentEnd.
        :type authorization: FulfillmentAuthorization
        """

        self._authorization = authorization
