# coding: utf-8

from __future__ import absolute_import

import re  # noqa: F401,E501
from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model
from models.decimal_value import DecimalValue  # noqa: F401,E501


class Price(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, currency: str=None, value: DecimalValue=None, estimated_value: DecimalValue=None, computed_value: DecimalValue=None, listed_value: DecimalValue=None, offered_value: DecimalValue=None, minimum_value: DecimalValue=None, maximum_value: DecimalValue=None):  # noqa: E501
        """Price - a model defined in Swagger

        :param currency: The currency of this Price.  # noqa: E501
        :type currency: str
        :param value: The value of this Price.  # noqa: E501
        :type value: DecimalValue
        :param estimated_value: The estimated_value of this Price.  # noqa: E501
        :type estimated_value: DecimalValue
        :param computed_value: The computed_value of this Price.  # noqa: E501
        :type computed_value: DecimalValue
        :param listed_value: The listed_value of this Price.  # noqa: E501
        :type listed_value: DecimalValue
        :param offered_value: The offered_value of this Price.  # noqa: E501
        :type offered_value: DecimalValue
        :param minimum_value: The minimum_value of this Price.  # noqa: E501
        :type minimum_value: DecimalValue
        :param maximum_value: The maximum_value of this Price.  # noqa: E501
        :type maximum_value: DecimalValue
        """
        self.swagger_types = {
            'currency': str,
            'value': DecimalValue,
            'estimated_value': DecimalValue,
            'computed_value': DecimalValue,
            'listed_value': DecimalValue,
            'offered_value': DecimalValue,
            'minimum_value': DecimalValue,
            'maximum_value': DecimalValue
        }

        self.attribute_map = {
            'currency': 'currency',
            'value': 'value',
            'estimated_value': 'estimated_value',
            'computed_value': 'computed_value',
            'listed_value': 'listed_value',
            'offered_value': 'offered_value',
            'minimum_value': 'minimum_value',
            'maximum_value': 'maximum_value'
        }
        self._currency = currency
        self._value = value
        self._estimated_value = estimated_value
        self._computed_value = computed_value
        self._listed_value = listed_value
        self._offered_value = offered_value
        self._minimum_value = minimum_value
        self._maximum_value = maximum_value

    @classmethod
    def from_dict(cls, dikt) -> 'Price':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Price of this Price.  # noqa: E501
        :rtype: Price
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self) -> str:
        """Gets the currency of this Price.


        :return: The currency of this Price.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this Price.


        :param currency: The currency of this Price.
        :type currency: str
        """

        self._currency = currency

    @property
    def value(self) -> DecimalValue:
        """Gets the value of this Price.


        :return: The value of this Price.
        :rtype: DecimalValue
        """
        return self._value

    @value.setter
    def value(self, value: DecimalValue):
        """Sets the value of this Price.


        :param value: The value of this Price.
        :type value: DecimalValue
        """

        self._value = value

    @property
    def estimated_value(self) -> DecimalValue:
        """Gets the estimated_value of this Price.


        :return: The estimated_value of this Price.
        :rtype: DecimalValue
        """
        return self._estimated_value

    @estimated_value.setter
    def estimated_value(self, estimated_value: DecimalValue):
        """Sets the estimated_value of this Price.


        :param estimated_value: The estimated_value of this Price.
        :type estimated_value: DecimalValue
        """

        self._estimated_value = estimated_value

    @property
    def computed_value(self) -> DecimalValue:
        """Gets the computed_value of this Price.


        :return: The computed_value of this Price.
        :rtype: DecimalValue
        """
        return self._computed_value

    @computed_value.setter
    def computed_value(self, computed_value: DecimalValue):
        """Sets the computed_value of this Price.


        :param computed_value: The computed_value of this Price.
        :type computed_value: DecimalValue
        """

        self._computed_value = computed_value

    @property
    def listed_value(self) -> DecimalValue:
        """Gets the listed_value of this Price.


        :return: The listed_value of this Price.
        :rtype: DecimalValue
        """
        return self._listed_value

    @listed_value.setter
    def listed_value(self, listed_value: DecimalValue):
        """Sets the listed_value of this Price.


        :param listed_value: The listed_value of this Price.
        :type listed_value: DecimalValue
        """

        self._listed_value = listed_value

    @property
    def offered_value(self) -> DecimalValue:
        """Gets the offered_value of this Price.


        :return: The offered_value of this Price.
        :rtype: DecimalValue
        """
        return self._offered_value

    @offered_value.setter
    def offered_value(self, offered_value: DecimalValue):
        """Sets the offered_value of this Price.


        :param offered_value: The offered_value of this Price.
        :type offered_value: DecimalValue
        """

        self._offered_value = offered_value

    @property
    def minimum_value(self) -> DecimalValue:
        """Gets the minimum_value of this Price.


        :return: The minimum_value of this Price.
        :rtype: DecimalValue
        """
        return self._minimum_value

    @minimum_value.setter
    def minimum_value(self, minimum_value: DecimalValue):
        """Sets the minimum_value of this Price.


        :param minimum_value: The minimum_value of this Price.
        :type minimum_value: DecimalValue
        """

        self._minimum_value = minimum_value

    @property
    def maximum_value(self) -> DecimalValue:
        """Gets the maximum_value of this Price.


        :return: The maximum_value of this Price.
        :rtype: DecimalValue
        """
        return self._maximum_value

    @maximum_value.setter
    def maximum_value(self, maximum_value: DecimalValue):
        """Sets the maximum_value of this Price.


        :param maximum_value: The maximum_value of this Price.
        :type maximum_value: DecimalValue
        """

        self._maximum_value = maximum_value
