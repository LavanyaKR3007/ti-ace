# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model


class RatingAck(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, feedback_ack: bool=None, rating_ack: bool=None):  # noqa: E501
        """RatingAck - a model defined in Swagger

        :param feedback_ack: The feedback_ack of this RatingAck.  # noqa: E501
        :type feedback_ack: bool
        :param rating_ack: The rating_ack of this RatingAck.  # noqa: E501
        :type rating_ack: bool
        """
        self.swagger_types = {
            'feedback_ack': bool,
            'rating_ack': bool
        }

        self.attribute_map = {
            'feedback_ack': 'feedback_ack',
            'rating_ack': 'rating_ack'
        }
        self._feedback_ack = feedback_ack
        self._rating_ack = rating_ack

    @classmethod
    def from_dict(cls, dikt) -> 'RatingAck':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RatingAck of this RatingAck.  # noqa: E501
        :rtype: RatingAck
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feedback_ack(self) -> bool:
        """Gets the feedback_ack of this RatingAck.

        If feedback has been recorded or not  # noqa: E501

        :return: The feedback_ack of this RatingAck.
        :rtype: bool
        """
        return self._feedback_ack

    @feedback_ack.setter
    def feedback_ack(self, feedback_ack: bool):
        """Sets the feedback_ack of this RatingAck.

        If feedback has been recorded or not  # noqa: E501

        :param feedback_ack: The feedback_ack of this RatingAck.
        :type feedback_ack: bool
        """

        self._feedback_ack = feedback_ack

    @property
    def rating_ack(self) -> bool:
        """Gets the rating_ack of this RatingAck.

        If rating has been recorded or not  # noqa: E501

        :return: The rating_ack of this RatingAck.
        :rtype: bool
        """
        return self._rating_ack

    @rating_ack.setter
    def rating_ack(self, rating_ack: bool):
        """Sets the rating_ack of this RatingAck.

        If rating has been recorded or not  # noqa: E501

        :param rating_ack: The rating_ack of this RatingAck.
        :type rating_ack: bool
        """

        self._rating_ack = rating_ack
