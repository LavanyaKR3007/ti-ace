# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model
from models.payment_params import PaymentParams  # noqa: F401,E501
from models.time import Time  # noqa: F401,E501


class Payment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uri: str=None, uri_mime_type: str=None, params: PaymentParams=None, type: str=None, status: str=None, time: Time=None):  # noqa: E501
        """Payment - a model defined in Swagger

        :param uri: The uri of this Payment.  # noqa: E501
        :type uri: str
        :param uri_mime_type: The uri_mime_type of this Payment.  # noqa: E501
        :type uri_mime_type: str
        :param params: The params of this Payment.  # noqa: E501
        :type params: PaymentParams
        :param type: The type of this Payment.  # noqa: E501
        :type type: str
        :param status: The status of this Payment.  # noqa: E501
        :type status: str
        :param time: The time of this Payment.  # noqa: E501
        :type time: Time
        """
        self.swagger_types = {
            'uri': str,
            'uri_mime_type': str,
            'params': PaymentParams,
            'type': str,
            'status': str,
            'time': Time
        }

        self.attribute_map = {
            'uri': 'uri',
            'uri_mime_type': 'uri_mime_type',
            'params': 'params',
            'type': 'type',
            'status': 'status',
            'time': 'time'
        }
        self._uri = uri
        self._uri_mime_type = uri_mime_type
        self._params = params
        self._type = type
        self._status = status
        self._time = time

    @classmethod
    def from_dict(cls, dikt) -> 'Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Payment of this Payment.  # noqa: E501
        :rtype: Payment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uri(self) -> str:
        """Gets the uri of this Payment.

        The payment URL of the payee.  If this field is empty or missing, it indicates that the payment has to be settled manually between the payer and the payee.<br/><br/><b>Recommendations:</b><ul><li>The list of supported URI schemes must be published in the network policy</li><li>If this field is set, then the BAP must render this link as a CTA or render the payment screen within a webview</li></ul>  # noqa: E501

        :return: The uri of this Payment.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """Sets the uri of this Payment.

        The payment URL of the payee.  If this field is empty or missing, it indicates that the payment has to be settled manually between the payer and the payee.<br/><br/><b>Recommendations:</b><ul><li>The list of supported URI schemes must be published in the network policy</li><li>If this field is set, then the BAP must render this link as a CTA or render the payment screen within a webview</li></ul>  # noqa: E501

        :param uri: The uri of this Payment.
        :type uri: str
        """

        self._uri = uri

    @property
    def uri_mime_type(self) -> str:
        """Gets the uri_mime_type of this Payment.

        Describes the contents of the uri field. If the value is text/html, it is recommended for the BAP to render the contents inside a webview. This generally does not render a good user experience on the BAP, hence the payment page developers are recommended to develop their payment pages in a mobile-friendly manner.  # noqa: E501

        :return: The uri_mime_type of this Payment.
        :rtype: str
        """
        return self._uri_mime_type

    @uri_mime_type.setter
    def uri_mime_type(self, uri_mime_type: str):
        """Sets the uri_mime_type of this Payment.

        Describes the contents of the uri field. If the value is text/html, it is recommended for the BAP to render the contents inside a webview. This generally does not render a good user experience on the BAP, hence the payment page developers are recommended to develop their payment pages in a mobile-friendly manner.  # noqa: E501

        :param uri_mime_type: The uri_mime_type of this Payment.
        :type uri_mime_type: str
        """
        allowed_values = ["text/html", "text/plain", "application/octet-stream;provider=$application_id"]  # noqa: E501
        if uri_mime_type not in allowed_values:
            raise ValueError(
                "Invalid value for `uri_mime_type` ({0}), must be one of {1}"
                .format(uri_mime_type, allowed_values)
            )

        self._uri_mime_type = uri_mime_type

    @property
    def params(self) -> PaymentParams:
        """Gets the params of this Payment.


        :return: The params of this Payment.
        :rtype: PaymentParams
        """
        return self._params

    @params.setter
    def params(self, params: PaymentParams):
        """Sets the params of this Payment.


        :param params: The params of this Payment.
        :type params: PaymentParams
        """

        self._params = params

    @property
    def type(self) -> str:
        """Gets the type of this Payment.


        :return: The type of this Payment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Payment.


        :param type: The type of this Payment.
        :type type: str
        """
        allowed_values = ["ON-ORDER", "PRE-FULFILLMENT", "ON-FULFILLMENT", "POST-FULFILLMENT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def status(self) -> str:
        """Gets the status of this Payment.


        :return: The status of this Payment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Payment.


        :param status: The status of this Payment.
        :type status: str
        """
        allowed_values = ["PAID", "NOT-PAID"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time(self) -> Time:
        """Gets the time of this Payment.


        :return: The time of this Payment.
        :rtype: Time
        """
        return self._time

    @time.setter
    def time(self, time: Time):
        """Sets the time of this Payment.


        :param time: The time of this Payment.
        :type time: Time
        """

        self._time = time
