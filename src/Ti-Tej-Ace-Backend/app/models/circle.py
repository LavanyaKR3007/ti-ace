# coding: utf-8

from __future__ import absolute_import

import re  # noqa: F401,E501
from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model
from models.gps import Gps  # noqa: F401,E501
from models.scalar import Scalar  # noqa: F401,E501


class Circle(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, gps: Gps=None, radius: Scalar=None):  # noqa: E501
        """Circle - a model defined in Swagger

        :param gps: The gps of this Circle.  # noqa: E501
        :type gps: Gps
        :param radius: The radius of this Circle.  # noqa: E501
        :type radius: Scalar
        """
        self.swagger_types = {
            'gps': Gps,
            'radius': Scalar
        }

        self.attribute_map = {
            'gps': 'gps',
            'radius': 'radius'
        }
        self._gps = gps
        self._radius = radius

    @classmethod
    def from_dict(cls, dikt) -> 'Circle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Circle of this Circle.  # noqa: E501
        :rtype: Circle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gps(self) -> Gps:
        """Gets the gps of this Circle.


        :return: The gps of this Circle.
        :rtype: Gps
        """
        return self._gps

    @gps.setter
    def gps(self, gps: Gps):
        """Sets the gps of this Circle.


        :param gps: The gps of this Circle.
        :type gps: Gps
        """
        if gps is None:
            raise ValueError("Invalid value for `gps`, must not be `None`")  # noqa: E501

        self._gps = gps

    @property
    def radius(self) -> Scalar:
        """Gets the radius of this Circle.


        :return: The radius of this Circle.
        :rtype: Scalar
        """
        return self._radius

    @radius.setter
    def radius(self, radius: Scalar):
        """Sets the radius of this Circle.


        :param radius: The radius of this Circle.
        :type radius: Scalar
        """
        if radius is None:
            raise ValueError("Invalid value for `radius`, must not be `None`")  # noqa: E501

        self._radius = radius
