# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model


class Vehicle(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, category: str=None, capacity: int=None, make: str=None, model: str=None, size: str=None, variant: str=None, color: str=None, energy_type: str=None, registration: str=None):  # noqa: E501
        """Vehicle - a model defined in Swagger

        :param category: The category of this Vehicle.  # noqa: E501
        :type category: str
        :param capacity: The capacity of this Vehicle.  # noqa: E501
        :type capacity: int
        :param make: The make of this Vehicle.  # noqa: E501
        :type make: str
        :param model: The model of this Vehicle.  # noqa: E501
        :type model: str
        :param size: The size of this Vehicle.  # noqa: E501
        :type size: str
        :param variant: The variant of this Vehicle.  # noqa: E501
        :type variant: str
        :param color: The color of this Vehicle.  # noqa: E501
        :type color: str
        :param energy_type: The energy_type of this Vehicle.  # noqa: E501
        :type energy_type: str
        :param registration: The registration of this Vehicle.  # noqa: E501
        :type registration: str
        """
        self.swagger_types = {
            'category': str,
            'capacity': int,
            'make': str,
            'model': str,
            'size': str,
            'variant': str,
            'color': str,
            'energy_type': str,
            'registration': str
        }

        self.attribute_map = {
            'category': 'category',
            'capacity': 'capacity',
            'make': 'make',
            'model': 'model',
            'size': 'size',
            'variant': 'variant',
            'color': 'color',
            'energy_type': 'energy_type',
            'registration': 'registration'
        }
        self._category = category
        self._capacity = capacity
        self._make = make
        self._model = model
        self._size = size
        self._variant = variant
        self._color = color
        self._energy_type = energy_type
        self._registration = registration

    @classmethod
    def from_dict(cls, dikt) -> 'Vehicle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Vehicle of this Vehicle.  # noqa: E501
        :rtype: Vehicle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self) -> str:
        """Gets the category of this Vehicle.


        :return: The category of this Vehicle.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this Vehicle.


        :param category: The category of this Vehicle.
        :type category: str
        """

        self._category = category

    @property
    def capacity(self) -> int:
        """Gets the capacity of this Vehicle.


        :return: The capacity of this Vehicle.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity: int):
        """Sets the capacity of this Vehicle.


        :param capacity: The capacity of this Vehicle.
        :type capacity: int
        """

        self._capacity = capacity

    @property
    def make(self) -> str:
        """Gets the make of this Vehicle.


        :return: The make of this Vehicle.
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make: str):
        """Sets the make of this Vehicle.


        :param make: The make of this Vehicle.
        :type make: str
        """

        self._make = make

    @property
    def model(self) -> str:
        """Gets the model of this Vehicle.


        :return: The model of this Vehicle.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this Vehicle.


        :param model: The model of this Vehicle.
        :type model: str
        """

        self._model = model

    @property
    def size(self) -> str:
        """Gets the size of this Vehicle.


        :return: The size of this Vehicle.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size: str):
        """Sets the size of this Vehicle.


        :param size: The size of this Vehicle.
        :type size: str
        """

        self._size = size

    @property
    def variant(self) -> str:
        """Gets the variant of this Vehicle.


        :return: The variant of this Vehicle.
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant: str):
        """Sets the variant of this Vehicle.


        :param variant: The variant of this Vehicle.
        :type variant: str
        """

        self._variant = variant

    @property
    def color(self) -> str:
        """Gets the color of this Vehicle.


        :return: The color of this Vehicle.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """Sets the color of this Vehicle.


        :param color: The color of this Vehicle.
        :type color: str
        """

        self._color = color

    @property
    def energy_type(self) -> str:
        """Gets the energy_type of this Vehicle.


        :return: The energy_type of this Vehicle.
        :rtype: str
        """
        return self._energy_type

    @energy_type.setter
    def energy_type(self, energy_type: str):
        """Sets the energy_type of this Vehicle.


        :param energy_type: The energy_type of this Vehicle.
        :type energy_type: str
        """

        self._energy_type = energy_type

    @property
    def registration(self) -> str:
        """Gets the registration of this Vehicle.


        :return: The registration of this Vehicle.
        :rtype: str
        """
        return self._registration

    @registration.setter
    def registration(self, registration: str):
        """Sets the registration of this Vehicle.


        :param registration: The registration of this Vehicle.
        :type registration: str
        """

        self._registration = registration
