# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model
from models.descriptor import Descriptor  # noqa: F401,E501
from models.price import Price  # noqa: F401,E501
from models.rateable import Rateable  # noqa: F401,E501
from models.tags import Tags  # noqa: F401,E501
from models.time import Time  # noqa: F401,E501


class Item(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, parent_item_id: str=None, descriptor: Descriptor=None, price: Price=None, category_id: str=None, fulfillment_id: str=None, rating: str=None, location_id: str=None, time: Time=None, rateable: Rateable=None, matched: bool=None, related: bool=None, recommended: bool=None, tags: Tags=None):  # noqa: E501
        """Item - a model defined in Swagger

        :param id: The id of this Item.  # noqa: E501
        :type id: str
        :param parent_item_id: The parent_item_id of this Item.  # noqa: E501
        :type parent_item_id: str
        :param descriptor: The descriptor of this Item.  # noqa: E501
        :type descriptor: Descriptor
        :param price: The price of this Item.  # noqa: E501
        :type price: Price
        :param category_id: The category_id of this Item.  # noqa: E501
        :type category_id: str
        :param fulfillment_id: The fulfillment_id of this Item.  # noqa: E501
        :type fulfillment_id: str
        :param rating: The rating of this Item.  # noqa: E501
        :type rating: str
        :param location_id: The location_id of this Item.  # noqa: E501
        :type location_id: str
        :param time: The time of this Item.  # noqa: E501
        :type time: Time
        :param rateable: The rateable of this Item.  # noqa: E501
        :type rateable: Rateable
        :param matched: The matched of this Item.  # noqa: E501
        :type matched: bool
        :param related: The related of this Item.  # noqa: E501
        :type related: bool
        :param recommended: The recommended of this Item.  # noqa: E501
        :type recommended: bool
        :param tags: The tags of this Item.  # noqa: E501
        :type tags: Tags
        """
        self.swagger_types = {
            'id': str,
            'parent_item_id': str,
            'descriptor': Descriptor,
            'price': Price,
            'category_id': str,
            'fulfillment_id': str,
            'rating': str,
            'location_id': str,
            'time': Time,
            'rateable': Rateable,
            'matched': bool,
            'related': bool,
            'recommended': bool,
            'tags': Tags
        }

        self.attribute_map = {
            'id': 'id',
            'parent_item_id': 'parent_item_id',
            'descriptor': 'descriptor',
            'price': 'price',
            'category_id': 'category_id',
            'fulfillment_id': 'fulfillment_id',
            'rating': 'rating',
            'location_id': 'location_id',
            'time': 'time',
            'rateable': 'rateable',
            'matched': 'matched',
            'related': 'related',
            'recommended': 'recommended',
            'tags': 'tags'
        }
        self._id = id
        self._parent_item_id = parent_item_id
        self._descriptor = descriptor
        self._price = price
        self._category_id = category_id
        self._fulfillment_id = fulfillment_id
        self._rating = rating
        self._location_id = location_id
        self._time = time
        self._rateable = rateable
        self._matched = matched
        self._related = related
        self._recommended = recommended
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Item of this Item.  # noqa: E501
        :rtype: Item
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Item.

        This is the most unique identifier of a service item. An example of an Item ID could be the SKU of a product.  # noqa: E501

        :return: The id of this Item.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Item.

        This is the most unique identifier of a service item. An example of an Item ID could be the SKU of a product.  # noqa: E501

        :param id: The id of this Item.
        :type id: str
        """

        self._id = id

    @property
    def parent_item_id(self) -> str:
        """Gets the parent_item_id of this Item.


        :return: The parent_item_id of this Item.
        :rtype: str
        """
        return self._parent_item_id

    @parent_item_id.setter
    def parent_item_id(self, parent_item_id: str):
        """Sets the parent_item_id of this Item.


        :param parent_item_id: The parent_item_id of this Item.
        :type parent_item_id: str
        """

        self._parent_item_id = parent_item_id

    @property
    def descriptor(self) -> Descriptor:
        """Gets the descriptor of this Item.


        :return: The descriptor of this Item.
        :rtype: Descriptor
        """
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor: Descriptor):
        """Sets the descriptor of this Item.


        :param descriptor: The descriptor of this Item.
        :type descriptor: Descriptor
        """

        self._descriptor = descriptor

    @property
    def price(self) -> Price:
        """Gets the price of this Item.


        :return: The price of this Item.
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price: Price):
        """Sets the price of this Item.


        :param price: The price of this Item.
        :type price: Price
        """

        self._price = price

    @property
    def category_id(self) -> str:
        """Gets the category_id of this Item.


        :return: The category_id of this Item.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id: str):
        """Sets the category_id of this Item.


        :param category_id: The category_id of this Item.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def fulfillment_id(self) -> str:
        """Gets the fulfillment_id of this Item.


        :return: The fulfillment_id of this Item.
        :rtype: str
        """
        return self._fulfillment_id

    @fulfillment_id.setter
    def fulfillment_id(self, fulfillment_id: str):
        """Sets the fulfillment_id of this Item.


        :param fulfillment_id: The fulfillment_id of this Item.
        :type fulfillment_id: str
        """

        self._fulfillment_id = fulfillment_id

    @property
    def rating(self) -> str:
        """Gets the rating of this Item.


        :return: The rating of this Item.
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating: str):
        """Sets the rating of this Item.


        :param rating: The rating of this Item.
        :type rating: str
        """

        self._rating = rating

    @property
    def location_id(self) -> str:
        """Gets the location_id of this Item.


        :return: The location_id of this Item.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id: str):
        """Sets the location_id of this Item.


        :param location_id: The location_id of this Item.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def time(self) -> Time:
        """Gets the time of this Item.


        :return: The time of this Item.
        :rtype: Time
        """
        return self._time

    @time.setter
    def time(self, time: Time):
        """Sets the time of this Item.


        :param time: The time of this Item.
        :type time: Time
        """

        self._time = time

    @property
    def rateable(self) -> Rateable:
        """Gets the rateable of this Item.


        :return: The rateable of this Item.
        :rtype: Rateable
        """
        return self._rateable

    @rateable.setter
    def rateable(self, rateable: Rateable):
        """Sets the rateable of this Item.


        :param rateable: The rateable of this Item.
        :type rateable: Rateable
        """

        self._rateable = rateable

    @property
    def matched(self) -> bool:
        """Gets the matched of this Item.


        :return: The matched of this Item.
        :rtype: bool
        """
        return self._matched

    @matched.setter
    def matched(self, matched: bool):
        """Sets the matched of this Item.


        :param matched: The matched of this Item.
        :type matched: bool
        """

        self._matched = matched

    @property
    def related(self) -> bool:
        """Gets the related of this Item.


        :return: The related of this Item.
        :rtype: bool
        """
        return self._related

    @related.setter
    def related(self, related: bool):
        """Sets the related of this Item.


        :param related: The related of this Item.
        :type related: bool
        """

        self._related = related

    @property
    def recommended(self) -> bool:
        """Gets the recommended of this Item.


        :return: The recommended of this Item.
        :rtype: bool
        """
        return self._recommended

    @recommended.setter
    def recommended(self, recommended: bool):
        """Sets the recommended of this Item.


        :param recommended: The recommended of this Item.
        :type recommended: bool
        """

        self._recommended = recommended

    @property
    def tags(self) -> Tags:
        """Gets the tags of this Item.


        :return: The tags of this Item.
        :rtype: Tags
        """
        return self._tags

    @tags.setter
    def tags(self, tags: Tags):
        """Sets the tags of this Item.


        :param tags: The tags of this Item.
        :type tags: Tags
        """

        self._tags = tags
