# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from models import util
from models.base_model_ import Model


class StructuredAddress(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, door: str=None, name: str=None, building: str=None, street: str=None, locality: str=None, district: str=None, ward: str=None, city: str=None, state: str=None, country: str=None, area_code: str=None):  # noqa: E501
        """StructuredAddress - a model defined in Swagger

        :param door: The door of this StructuredAddress.  # noqa: E501
        :type door: str
        :param name: The name of this StructuredAddress.  # noqa: E501
        :type name: str
        :param building: The building of this StructuredAddress.  # noqa: E501
        :type building: str
        :param street: The street of this StructuredAddress.  # noqa: E501
        :type street: str
        :param locality: The locality of this StructuredAddress.  # noqa: E501
        :type locality: str
        :param district: The district of this StructuredAddress.  # noqa: E501
        :type district: str
        :param ward: The ward of this StructuredAddress.  # noqa: E501
        :type ward: str
        :param city: The city of this StructuredAddress.  # noqa: E501
        :type city: str
        :param state: The state of this StructuredAddress.  # noqa: E501
        :type state: str
        :param country: The country of this StructuredAddress.  # noqa: E501
        :type country: str
        :param area_code: The area_code of this StructuredAddress.  # noqa: E501
        :type area_code: str
        """
        self.swagger_types = {
            'door': str,
            'name': str,
            'building': str,
            'street': str,
            'locality': str,
            'district': str,
            'ward': str,
            'city': str,
            'state': str,
            'country': str,
            'area_code': str
        }

        self.attribute_map = {
            'door': 'door',
            'name': 'name',
            'building': 'building',
            'street': 'street',
            'locality': 'locality',
            'district': 'district',
            'ward': 'ward',
            'city': 'city',
            'state': 'state',
            'country': 'country',
            'area_code': 'area_code'
        }
        self._door = door
        self._name = name
        self._building = building
        self._street = street
        self._locality = locality
        self._district = district
        self._ward = ward
        self._city = city
        self._state = state
        self._country = country
        self._area_code = area_code

    @classmethod
    def from_dict(cls, dikt) -> 'StructuredAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StructuredAddress of this StructuredAddress.  # noqa: E501
        :rtype: StructuredAddress
        """
        return util.deserialize_model(dikt, cls)

    @property
    def door(self) -> str:
        """Gets the door of this StructuredAddress.

        Door / Shop number of the address  # noqa: E501

        :return: The door of this StructuredAddress.
        :rtype: str
        """
        return self._door

    @door.setter
    def door(self, door: str):
        """Sets the door of this StructuredAddress.

        Door / Shop number of the address  # noqa: E501

        :param door: The door of this StructuredAddress.
        :type door: str
        """

        self._door = door

    @property
    def name(self) -> str:
        """Gets the name of this StructuredAddress.

        Name of address if applicable. Example, shop name  # noqa: E501

        :return: The name of this StructuredAddress.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this StructuredAddress.

        Name of address if applicable. Example, shop name  # noqa: E501

        :param name: The name of this StructuredAddress.
        :type name: str
        """

        self._name = name

    @property
    def building(self) -> str:
        """Gets the building of this StructuredAddress.

        Name of the building or block  # noqa: E501

        :return: The building of this StructuredAddress.
        :rtype: str
        """
        return self._building

    @building.setter
    def building(self, building: str):
        """Sets the building of this StructuredAddress.

        Name of the building or block  # noqa: E501

        :param building: The building of this StructuredAddress.
        :type building: str
        """

        self._building = building

    @property
    def street(self) -> str:
        """Gets the street of this StructuredAddress.

        Street name or number  # noqa: E501

        :return: The street of this StructuredAddress.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street: str):
        """Sets the street of this StructuredAddress.

        Street name or number  # noqa: E501

        :param street: The street of this StructuredAddress.
        :type street: str
        """

        self._street = street

    @property
    def locality(self) -> str:
        """Gets the locality of this StructuredAddress.

        Name of the locality, apartments  # noqa: E501

        :return: The locality of this StructuredAddress.
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality: str):
        """Sets the locality of this StructuredAddress.

        Name of the locality, apartments  # noqa: E501

        :param locality: The locality of this StructuredAddress.
        :type locality: str
        """

        self._locality = locality

    @property
    def district(self) -> str:
        """Gets the district of this StructuredAddress.

        Name of the district this address is in  # noqa: E501

        :return: The district of this StructuredAddress.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district: str):
        """Sets the district of this StructuredAddress.

        Name of the district this address is in  # noqa: E501

        :param district: The district of this StructuredAddress.
        :type district: str
        """

        self._district = district

    @property
    def ward(self) -> str:
        """Gets the ward of this StructuredAddress.

        Name or number of the ward if applicable  # noqa: E501

        :return: The ward of this StructuredAddress.
        :rtype: str
        """
        return self._ward

    @ward.setter
    def ward(self, ward: str):
        """Sets the ward of this StructuredAddress.

        Name or number of the ward if applicable  # noqa: E501

        :param ward: The ward of this StructuredAddress.
        :type ward: str
        """

        self._ward = ward

    @property
    def city(self) -> str:
        """Gets the city of this StructuredAddress.

        City name  # noqa: E501

        :return: The city of this StructuredAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this StructuredAddress.

        City name  # noqa: E501

        :param city: The city of this StructuredAddress.
        :type city: str
        """

        self._city = city

    @property
    def state(self) -> str:
        """Gets the state of this StructuredAddress.

        State name  # noqa: E501

        :return: The state of this StructuredAddress.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this StructuredAddress.

        State name  # noqa: E501

        :param state: The state of this StructuredAddress.
        :type state: str
        """

        self._state = state

    @property
    def country(self) -> str:
        """Gets the country of this StructuredAddress.

        Country name  # noqa: E501

        :return: The country of this StructuredAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this StructuredAddress.

        Country name  # noqa: E501

        :param country: The country of this StructuredAddress.
        :type country: str
        """

        self._country = country

    @property
    def area_code(self) -> str:
        """Gets the area_code of this StructuredAddress.

        Area code. This can be Pincode, ZIP code or any equivalent  # noqa: E501

        :return: The area_code of this StructuredAddress.
        :rtype: str
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code: str):
        """Sets the area_code of this StructuredAddress.

        Area code. This can be Pincode, ZIP code or any equivalent  # noqa: E501

        :param area_code: The area_code of this StructuredAddress.
        :type area_code: str
        """

        self._area_code = area_code
